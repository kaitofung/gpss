<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<context:component-scan
		base-package="com.gpss.marketing.service"></context:component-scan>
	<bean id="dataSource"
		class="com.alibaba.druid.pool.DruidDataSource" init-method="init">
		<property name="driverClassName"
			value="${db.druid.driverClassName}" />	<!-- 定义数据库驱动程序 -->
		<property name="url" value="${db.druid.url}" />	<!-- 数据库连接地址 -->
		<property name="username" value="${db.druid.username}" />		<!-- 数据库连接用户名 -->
		<property name="password" value="${db.druid.password}" />	<!-- 数据库连接密码 -->
		<property name="maxActive" value="${db.druid.maxActive}" />	<!-- 最大连接数 -->
		<property name="minIdle" value="${db.druid.minIdle}" />	<!-- 最小连接池 -->
		<property name="initialSize" value="${db.druid.initialSize}" />	<!-- 初始化连接大小 -->
		<property name="maxWait" value="${db.druid.maxWait}" />	<!-- 最大等待时间 -->
		<property name="timeBetweenEvictionRunsMillis"
			value="${db.druid.timeBetweenEvictionRunsMillis}" />  <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis"
			value="${db.druid.minEvictableIdleTimeMillis}" /> <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="validationQuery"
			value="${db.druid.validationQuery}" />  <!-- 验证SQL -->
		<!-- 建议配置为true，不影响性能，并且保证安全性。 -->
		<!-- 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。 -->
		<property name="testWhileIdle"
			value="${db.druid.testWhileIdle}" />
		<property name="testOnBorrow"
			value="${db.druid.testOnBorrow}" />	<!-- 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能 -->
		<property name="testOnReturn"
			value="${db.druid.testOnReturn}" /> 	<!-- 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能 -->
		<!-- 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。 -->
		<property name="poolPreparedStatements"
			value="${db.druid.poolPreparedStatements}" />
		<!-- 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100 -->
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="${db.druid.maxPoolPreparedStatementPerConnectionSize}" />
		<property name="filters" value="${db.druid.filters}" /> <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙 -->
	</bean>

	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<tx:advice id="transactionAdvice"
		transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="get*" propagation="REQUIRED"
				read-only="true" />
		</tx:attributes>
	</tx:advice>

	<aop:config>
		<aop:pointcut
			expression="execution(public * com.gpss..service..*.*(..))"
			id="myPointCut" />
		<aop:advisor advice-ref="transactionAdvice"
			pointcut-ref="myPointCut" />
	</aop:config>

<!-- 	<bean primary="true" id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="configLocation"
			value="classpath:mybatis/mybatis-config.xml"></property>
	</bean>


	<bean id="mapperScannerConfigurer"
		class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.gpss.user.service.dao"></property>
		<property name="sqlSessionFactoryBeanName" ref="sqlFactory"></property>
	</bean> -->
	
	
			<!-- MyBatis之中所有的连接都通过SqlSssionFactory创建的，但是现在这个操作类需要被Spring所管理 -->
	<bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>	<!-- 引入数据源 -->
		<!-- 引入MyBatis的核心配置文件，实际上这个类可以直接完成该配置文件的定义 -->
		<property name="configLocation"
			value="classpath:mybatis/mybatis-config.xml"></property>
		<!-- 定义所有要引入的映射资源文件的地址 -->
		<property name="mapperLocations" value="classpath*:mapper/*.xml"/>
	</bean>
	
	<!-- 配置一个资源文件的扫描处理类，扫描后的文件自动为DAO实现类 --> 
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 定义资源的扫描程序包，这个包下的内容可以自动转换为DAO接口对象 -->
		<property name="basePackage" value="com.gpss.marketing.service.dao"></property>
		<!-- 定义要使用的SqlSessionFactory程序类 -->
		<property name="sqlSessionFactoryBeanName" value="sessionFactory"/>
	</bean>


</beans>
